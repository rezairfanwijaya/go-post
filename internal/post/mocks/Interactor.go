// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	post "go-post/internal/post"

	mock "github.com/stretchr/testify/mock"
)

// Interactor is an autogenerated mock type for the Interactor type
type Interactor struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: _a0
func (_m *Interactor) CreatePost(_a0 post.Post) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(post.Post) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(post.Post) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(post.Post) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: postId, userId
func (_m *Interactor) DeletePost(postId int, userId int) (int, error) {
	ret := _m.Called(postId, userId)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (int, error)); ok {
		return rf(postId, userId)
	}
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(postId, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(postId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: userId, postId
func (_m *Interactor) GetPost(userId int, postId int) (post.Post, int, error) {
	ret := _m.Called(userId, postId)

	var r0 post.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) (post.Post, int, error)); ok {
		return rf(userId, postId)
	}
	if rf, ok := ret.Get(0).(func(int, int) post.Post); ok {
		r0 = rf(userId, postId)
	} else {
		r0 = ret.Get(0).(post.Post)
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(userId, postId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(userId, postId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPostByUserId provides a mock function with given fields: userId
func (_m *Interactor) GetPostByUserId(userId int) ([]post.Post, int, error) {
	ret := _m.Called(userId)

	var r0 []post.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int) ([]post.Post, int, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) []post.Post); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePost provides a mock function with given fields: postId, userId, _a2
func (_m *Interactor) UpdatePost(postId int, userId int, _a2 post.Post) (post.Post, int, error) {
	ret := _m.Called(postId, userId, _a2)

	var r0 post.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, post.Post) (post.Post, int, error)); ok {
		return rf(postId, userId, _a2)
	}
	if rf, ok := ret.Get(0).(func(int, int, post.Post) post.Post); ok {
		r0 = rf(postId, userId, _a2)
	} else {
		r0 = ret.Get(0).(post.Post)
	}

	if rf, ok := ret.Get(1).(func(int, int, post.Post) int); ok {
		r1 = rf(postId, userId, _a2)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, post.Post) error); ok {
		r2 = rf(postId, userId, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateUser provides a mock function with given fields: userId, _a1
func (_m *Interactor) ValidateUser(userId int, _a1 post.Post) bool {
	ret := _m.Called(userId, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, post.Post) bool); ok {
		r0 = rf(userId, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewInteractor creates a new instance of Interactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInteractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interactor {
	mock := &Interactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
