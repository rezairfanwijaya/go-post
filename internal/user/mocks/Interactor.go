// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	user "go-post/internal/user"

	mock "github.com/stretchr/testify/mock"
)

// Interactor is an autogenerated mock type for the Interactor type
type Interactor struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *Interactor) CreateUser(_a0 user.User) (user.User, int, error) {
	ret := _m.Called(_a0)

	var r0 user.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) int); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(user.User) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *Interactor) GetUserByEmail(email string) (user.User, int, error) {
	ret := _m.Called(email)

	var r0 user.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (user.User, int, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) user.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserById provides a mock function with given fields: userId
func (_m *Interactor) GetUserById(userId int) (user.User, int, error) {
	ret := _m.Called(userId)

	var r0 user.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (user.User, int, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) user.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateUser provides a mock function with given fields: userId
func (_m *Interactor) ValidateUser(userId int) (bool, error) {
	ret := _m.Called(userId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInteractor creates a new instance of Interactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInteractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interactor {
	mock := &Interactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
